# shellcheck shell=bash

PROFILE_SELF_NAME="$(basename "${BASH_SOURCE}")"
SANDBOX_XAUTHORITY="${SANDBOX_XDG_RUNTIME_DIR}/xauthority"

### BASIC SETUP

# seccomp rules
seccomp "${HOME}/pr/sljail/seccomp/firefox.c"

# namespace args
arg as-pid-1
arg die-with-parent
# create new namespace for everything by default
arg unshare-all
# firefox uses the internet obviously, so share net namespace
arg share-net
# new process session, which counters TIOCSTI (CVE-2023-28100) escape, despite seccomp rules below block it
arg new-session

# make the FHS
arg dir '/usr' &&
  arg dir '/usr/local' &&
  arg dir '/usr/lib' &&
  arg symlink '/usr/lib' '/usr/lib64' &&
  arg dir '/usr/include'
  arg dir '/usr/bin' &&
  arg dir '/usr/sbin' &&
  arg dir '/usr/share'
arg symlink '/usr/lib' '/lib'
arg symlink '/usr/lib64' '/lib64'
arg symlink '/usr/bin' '/bin'
arg symlink '/usr/bin' '/sbin'
arg dir '/var' &&
  arg dir '/var/empty'
arg dir '/run' &&
  arg dir '/run/user' &&
  arg symlink '/run' '/var/run'
arg perms 700 && arg dir "${SANDBOX_XDG_RUNTIME_DIR}"
arg dev '/dev'
arg proc '/proc'
arg tmpfs '/tmp'

# user stuff
arg uid "${SANDBOX_UID}"
arg gid "${SANDBOX_GID}"
user 'user'

# environment args
arg clearenv
arg setenv 'LANG' 'en_US.UTF-8'
arg setenv 'XDG_SESSION_TYPE' 'X11'
arg setenv 'XDG_CURRENT_DESKTOP' 'gnome'
arg setenv 'XDG_RUNTIME_DIR' "${SANDBOX_XDG_RUNTIME_DIR}"
arg setenv 'PATH' '/usr/bin'
arg setenv 'USER' "${SANDBOX_USER}"
arg setenv 'USERNAME' "${SANDBOX_USER}"
arg setenv 'HOME' "${SANDBOX_HOME}"
arg setenv 'GTK_THEME' 'Adwaita:dark'

# spoof files
passwd
group
nsswitch.conf
host.conf
hostname 'ubuntu'
hosts
machine-id
localtime '/usr/share/zoneinfo/Turkey'

### ALLOW RULES

# allow gpu
arg dev-bind '/dev/dri' '/dev/dri'
#arg ro-bind '/sys/dev/char' '/sys/dev/char'
#arg ro-bind '/sys/devices/pci0000:00' '/sys/devices/pci0000:00'
#arg2 ro-bind '/sys/bus/pci'
#arg2 ro-bind '/sys/devices/system/cpu'
arg symlink '/sys/devices/pci0000:00/0000:00:03.0/0000:01:00.0/drm/card0' '/sys/dev/char/226:0' 
arg dev-bind '/sys/devices/pci0000:00/0000:00:03.0/0000:01:00.0' '/sys/devices/pci0000:00/0000:00:03.0/0000:01:00.0' 
arg symlink '/sys/devices/pci0000:00/0000:00:03.0/0000:01:00.0/drm/renderD128' '/sys/dev/char/226:128' 
arg dev-bind '/sys/devices/pci0000:00/0000:00:03.0/0000:01:00.0' '/sys/devices/pci0000:00/0000:00:03.0/0000:01:00.0' 
arg2 dev-bind '/dev/dri'

# allow sound
arg2 ro-bind-try '/etc/alsa'
arg2 ro-bind-try '/etc/pulse'
arg2 ro-bind-try '/etc/pipewire'
arg ro-bind-try "${XDG_RUNTIME_DIR}/pulse/native" "${SANDBOX_XDG_RUNTIME_DIR}/pulse/native"

# allow display server
case "${XDG_SESSION_TYPE}" in
  X11)
    arg2 bind "/tmp/.X11-unix/X${DISPLAY#:}"
    arg setenv 'XAUTHORITY' "${SANDBOX_XAUTHORITY}"
    arg setenv 'DISPLAY' "${DISPLAY}"
    arg ro-bind "${XAUTHORITY}" "${SANDBOX_XAUTHORITY}"
    ;;
  wayland)
    arg ro-bind-try "${XDG_RUNTIME_DIR}/wayland-1" "${SANDBOX_XDG_RUNTIME_DIR}/wayland-1"
    arg setenv 'MOZ_ENABLE_WAYLAND' 1
    ;;
  *)
    say "${PROFILE_SELF_NAME}: please set XDG_SESSION_TYPE environment variable so the profile can decide which display server to whitelist." &&
      exit 1
    ;;
esac

# allow /usr/share common
arg2 ro-bind-try '/usr/share/icu'
arg2 ro-bind-try '/usr/share/drirc.d'
arg2 ro-bind-try '/usr/share/fonts'
arg2 ro-bind-try '/usr/share/fontconfig'
arg2 ro-bind-try '/usr/share/glib-2.0'
arg2 ro-bind-try '/usr/share/glvnd'
arg2 ro-bind-try '/usr/share/libdrm'
arg2 ro-bind-try '/usr/share/icons'
arg2 ro-bind-try '/usr/share/mime'
arg2 ro-bind-try '/usr/share/X11/xkb'
arg2 ro-bind-try '/usr/share/icons'
arg2 ro-bind-try '/usr/share/mime'

# allow /etc common
arg2 ro-bind '/etc/fonts'
arg2 ro-bind '/etc/resolv.conf'

# allow ssl/certificates
arg2 ro-bind '/etc/ssl'
arg2 ro-bind '/etc/ca-certificates'
arg2 ro-bind '/usr/share/ca-certificates'

# allow gtk
arg2 ro-bind '/usr/share/gtk-3.0'

# allow notifications
dbus-user.talk 'org.freedesktop.Notifications'

# allow inhibiting screensavers
dbus-user.talk 'org.freedesktop.ScreenSaver'

# allow firefox stuff
arg2 ro-bind '/usr/bin'
arg2 ro-bind '/usr/lib'
#arg2 ro-bind '/usr'
#arg2 ro-bind '/usr'
arg2 ro-bind '/usr/bin/firefox'
#arg2 ro-bind '/usr/lib/firefox'
# ldd '/usr/lib/firefox/firefox' | awk '{ print $3 }' | grep -v '^$' | while IFS= read -r lib; do
#   arg2 ro-bind "${lib}"
# done
# arg2 ro-bind '/usr/lib/ld-linux'*
# arg2 ro-bind '/usr/lib32/ld-linux'*
# arg2 ro-bind '/usr/lib/libedit.'*
# arg2 ro-bind '/usr/lib/libc.'*
# arg2 ro-bind '/usr/lib/libstdc++.'*
# arg2 ro-bind '/usr/lib/libgcc_s.'*
# arg2 ro-bind '/usr/lib/libnspr4.'*
# arg2 ro-bind '/usr/lib/libgtk'*
# arg2 ro-bind '/usr/lib/libgdk'*
# arg2 ro-bind '/usr/lib/libgmodule'*
# arg2 ro-bind '/usr/lib/libgobject'*
# arg2 ro-bind '/usr/lib/libpango'*
# arg2 ro-bind '/usr/lib/libgio'*
# arg2 ro-bind '/usr/lib/libharfbuzz'*
# arg2 ro-bind '/usr/lib/libcairo'*
# arg2 ro-bind '/usr/lib/libfontconfig.'*
# arg2 ro-bind '/usr/lib/libfribidi.'*
# arg2 ro-bind '/usr/lib/libatk'*
# arg2 ro-bind '/usr/lib/libepoxy.'*
# arg2 ro-bind '/usr/lib/libXi.'*
# arg2 ro-bind '/usr/lib/libX11.'*
# arg2 ro-bind '/usr/lib/libglib'*
# arg2 ro-bind '/usr/lib/libtracker-sparql'*
# arg2 ro-bind '/usr/lib/libcloudproviders.'*
# arg2 ro-bind '/usr/lib/libXfixes.'*
# arg2 ro-bind '/usr/lib/libxkb'*
# arg2 ro-bind '/usr/lib/libX'*
# arg2 ro-bind '/usr/lib/libwayland'*
# arg2 ro-bind '/usr/lib/libpcre'*
# arg2 ro-bind '/usr/lib/libffi'*
# arg2 ro-bind '/usr/lib/libz'*
# arg2 ro-bind '/usr/lib/libmount'*
# arg2 ro-bind '/usr/lib/libthai.'*
# arg2 ro-bind '/usr/lib/libfreetype.'*
# arg2 ro-bind '/usr/lib/libgraphite2.'*
# arg2 ro-bind '/usr/lib/libpng'*
# arg2 ro-bind '/usr/lib/libxcb'*
# arg2 ro-bind '/usr/lib/libpixman'*
# arg2 ro-bind '/usr/lib/libjpeg'*
# arg2 ro-bind '/usr/lib/libexpat'*
# arg2 ro-bind '/usr/lib/libtiff'*
# arg2 ro-bind '/usr/lib/libatspi'*
# arg2 ro-bind '/usr/lib/libm.'*
# arg2 ro-bind '/usr/lib/libncursesw.'*

arg2 ro-bind-try '/etc/ld.so.cache'
arg2 ro-bind-try '/etc/ld.so.conf'
arg2 ro-bind-try '/etc/ld.so.conf.d'

arg2 ro-bind '/usr/share/applications/firefox.desktop'
find '/usr/share/icons/hicolor' | grep '/firefox' | while IFS= read -r file; do
  arg2 ro-bind "${file}"
done
dbus-user.own 'org.mozilla.Firefox.*'
dbus-user.own 'org.mozilla.firefox.*'
dbus-user.own 'org.mpris.MediaPlayer2.firefox.*'
